[tasks.database_reset_test]
env = { "DATABASE_URL" = "postgres://postgres:exampl@localhost:5432/rocket_rc_test" }
script = [
'''
	cd ./rc_signal/
	diesel database reset
'''
]

[tasks.database_reset_prod]
env = { "DATABASE_URL" = "postgres://postgres:exampl@localhost:5432/rocket_rc" }
script = [
'''
	cd ./rc_signal/
	diesel database reset
'''
]

[tasks.docker_database_reset_prod]
env = { "DATABASE_URL" = "postgres://postgres:exampl@postgres:5432/rocket_rc" }
script = [
'''
	docker run \
		-e DATABASE_URL="$DATABASE_URL" \
		--network=dev_rocket_net \
		diesel_cli \
		diesel database reset
'''
]


[tasks.test_rc_signal]
env = { "DATABASE_URL" = "postgres://postgres:exampl@localhost:5432/rocket_rc_test" }
script = [
'''
	cd ./rc_signal/
	cargo test -- --test-threads=1
'''
]

[tasks.docker_reset_db]
script = [
'''
	docker-compose -f ./docker/dev/docker-compose.yml down -v
	docker-compose -f ./docker/dev/docker-compose.yml up -d
'''
]

[tasks.docker_build_diesel_cli]
script = [
'''
	context_dir="/tmp/rocket_rc/diesel_cli"
	rc_context="$context_dir"
	[ -e "$context_dir"  ] && rm -rf "$context_dir"
	mkdir -p "$rc_context"
	cp ./docker/diesel_cli/Dockerfile "$rc_context"
	cp -r ./rc_signal/migrations "$rc_context"
	cd "$context_dir"
	docker build  \
		-t diesel_cli \
		./
'''
]

[tasks.save_docker_build_diesel_cli]
script = [
'''
	[ -e /tmp/diesel_cli_tar ] && rm -rf /tmp/diesel_cli_tar
	mkdir -p /tmp/diesel_cli_tar
	docker save diesel_cli -o /tmp/diesel_cli_tar/diesel_cli.c.tar
	cd /tmp/diesel_cli_tar
	tar -zvcf diesel_cli.tar ./diesel_cli.c.tar
'''
]

[tasks.docker_build_rc_signal]
script = [
'''
	cd ./rc_signal
	context_dir="/tmp/rocket_rc/rc_signal"
	rc_context="$context_dir"/ctx
	[ -e "$context_dir"  ] && rm -rf "$context_dir"
	mkdir -p "$rc_context"
	cp -r ./* "$rc_context"
	cp -r ../lib "$context_dir"
	cp ../docker/rc_signal/Dockerfile "$context_dir"
	cp ../docker/rc_signal/deps.sh "$context_dir"
	cp ../docker/rc_signal/entrypoint.sh "$context_dir"
	cd "$context_dir"
	ls -lath
	[ -e ./ctx/target ] && rm -rf ./ctx/target
	docker build  \
		-t rc_signal \
		--build-arg  p_dir=ctx \
		./
'''
]

[tasks.save_docker_build_rc_signal]
dependencies = ["docker_build_rc_signal"]
script = [
'''
	[ -e /tmp/rc_signal_tar  ] && rm -rf /tmp/rc_signal_tar
	mkdir -p /tmp/rc_signal_tar
	docker save rc_signal -o /tmp/rc_signal_tar/rc_signal.c.tar
	cd /tmp/rc_signal_tar
	tar -zvcf rc_signal.tar ./rc_signal.c.tar
'''
]

[tasks.build_rc_app]
script = [
'''
	cd ./app
	which nvm
	yarn install
	yarn run build
'''
]

[tasks.docker_build_nginx]
dependencies = ["docker_build_app"]
script = [
'''
	context_dir="/tmp/rc_nginx"
	[ -e "$context_dir"  ] && rm -rf "$context_dir"
	mkdir -p "$context_dir"
	cp -r ./docker/nginx/* "$context_dir"
	cp -r /tmp/rc_app_o/dist "$context_dir"
	cd "$context_dir"
	docker build  \
		-t rc_nginx \
		./
'''
]

[tasks.docker_build_rc_server]
env = { "MODE" = "NEW" }
script = [
'''
	cd ./server
	context_dir="/tmp/rocket_rc/server"
	rc_context="$context_dir"/ctx
	[ -e "$context_dir"  ] && rm -rf "$context_dir"
	mkdir -p "$rc_context"
	cp -r ./* "$rc_context"
	cp -r ../lib "$context_dir"
	cp ../docker/server/Dockerfile "$context_dir"
	cp ../docker/server/entrypoint.sh "$context_dir"
	cd "$context_dir"
	ls -lath
	[ -e ./ctx/target ] && rm -rf ./ctx/target
	docker build  \
		-t rc_server \
		--build-arg  p_dir=ctx \
		--build-arg  mode=${MODE} \
		./
'''
]

[tasks.docker_build_app]
script = [
'''
	context_dir="/tmp/rc_app"
	[ -e "$context_dir"  ] && rm -rf "$context_dir"
	mkdir -p "$context_dir"
	cp ./docker/app_build/* "$context_dir"
	cp -r ./app "$context_dir"
	cd "$context_dir"
	rm -rf ./node_modules
	rm -rf ./dist
	docker build  \
		-t rc_app \
		./
	img=`docker create rc_app`
	[ -e /tmp/rc_app_o/ && rm -rf /tmp/rc_app_o ]
	mkdir -p /tmp/rc_app_o
	echo $img
	docker cp "$img":/app/dist /tmp/rc_app_o/
	docker container rm "$img"
'''
]

[tasks.save_docker_build_rc_server]
dependencies = ["docker_build_rc_server"]
script = [
'''
	[ -e /tmp/rc_server_tar  ] && rm -rf /tmp/rc_server_tar
	mkdir -p /tmp/rc_server_tar
	docker save rc_server -o /tmp/rc_server_tar/rc_server.c.tar
	cd /tmp/rc_server_tar
	tar -zvcf rc_server.tar ./rc_server.c.tar
'''
]

[tasks.run_rc_nginx]
script = [
'''
	docker run \
		--name rc_nginx \
		--restart always \
  	--log-driver syslog \
		-e RC_SERVER_HOST=rc_server \
		--network=dev_rocket_net \
		-p 7000:7000 \
		rc_nginx
'''
]

[tasks.run_rc_signal_docker]
script = [
'''
	docker run \
		--restart always \
  	--log-driver syslog \
		-e RC_POSTGRES_HOST=postgres \
		--network=dev_rocket_net \
		-d \
		rc_signal
'''
]

[tasks.run_rc_server_docker]
script = [
'''
	docker rm rc_server
	docker run \
  	--name rc_server \
		--restart always \
  	--log-driver syslog \
		-e RC_POSTGRES_HOST=postgres \
		--network=dev_rocket_net \
		-p 8000:8000 \
		-p 3012:3012 \
		-d \
		rc_server
'''
]
