[tasks.database_reset_test]
env = { "DATABASE_URL" = "postgres://postgres:exampl@localhost:5432/rocket_rc_test" }
script = [
'''
	cd ./rc_signal/
	diesel database reset
'''
]

[tasks.database_reset_prod]
env = { "DATABASE_URL" = "postgres://postgres:exampl@localhost:5432/rocket_rc" }
script = [
'''
	cd ./rc_signal/
	diesel database reset
'''
]

[tasks.test_rc_signal]
env = { "DATABASE_URL" = "postgres://postgres:exampl@localhost:5432/rocket_rc_test" }
script = [
'''
	cd ./rc_signal/
	cargo test -- --test-threads=1
'''
]

[tasks.docker_reset_db]
script = [
'''
	docker-compose -f ./docker/dev/docker-compose.yml down -v
	docker-compose -f ./docker/dev/docker-compose.yml up -d
'''
]

[tasks.docker_build_rc_signal]
env = { "MODE" = "NEW" }
script = [
'''
	cd ./rc_signal
	context_dir="/tmp/rocket_rc/rc_signal"
	rc_context="$context_dir"/ctx
	[ -e "$context_dir"  ] && rm -rf "$context_dir"
	mkdir -p "$rc_context"
	cp -r ./* "$rc_context"
	cp -r ../lib "$context_dir"
	cp ../docker/rc_signal/Dockerfile "$context_dir"
	cp ../docker/rc_signal/deps.sh "$context_dir"
	cp ../docker/rc_signal/entrypoint.sh "$context_dir"
	cd "$context_dir"
	ls -lath
	[ -e ./ctx/target ] && rm -rf ./ctx/target
	docker build  \
		-t rc_signal \
		--build-arg  p_dir=ctx \
		--build-arg  mode=${MODE} \
		./
'''
]

[tasks.docker_build_rc_server]
env = { "MODE" = "NEW" }
script = [
'''
	cd ./server
	context_dir="/tmp/rocket_rc/server"
	rc_context="$context_dir"/ctx
	[ -e "$context_dir"  ] && rm -rf "$context_dir"
	mkdir -p "$rc_context"
	cp -r ./* "$rc_context"
	cp -r ../lib "$context_dir"
	cp ../docker/server/Dockerfile "$context_dir"
	cp ../docker/server/entrypoint.sh "$context_dir"
	cd "$context_dir"
	ls -lath
	[ -e ./ctx/target ] && rm -rf ./ctx/target
	docker build  \
		-t rc_server \
		--build-arg  p_dir=ctx \
		--build-arg  mode=${MODE} \
		./
'''
]

[tasks.run_rc_signal_docker]
script = [
'''
	docker run \
		--restart always \
  	--log-driver syslog \
		-e RC_POSTGRES_HOST=postgres \
		--network=dev_rocket_net \
		-d \
		rc_signal
'''
]

[tasks.run_rc_server_docker]
script = [
'''
	docker run \
		--restart always \
  	--log-driver syslog \
		-e RC_POSTGRES_HOST=postgres \
		--network=dev_rocket_net \
		-p 8000:8000 \
		-d \
		rc_server
'''
]
